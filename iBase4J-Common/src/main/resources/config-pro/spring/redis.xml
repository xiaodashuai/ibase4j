<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns="http://www.springframework.org/schema/beans" xmlns:c="http://www.springframework.org/schema/c"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
	<!-- jedis 配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最小空闲数-->  
        <property name="minIdle" value="${redis.minIdle}" />
        <!--最大空闲数-->  
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--最大连接数-->  
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->  
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean >


	<bean id="resourcePropertySource" class="org.springframework.core.io.support.ResourcePropertySource"
		  c:name="redis.properties" c:resource="classpath:system.properties"/>
	<!-- redisCluster配置 -->
	<bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<constructor-arg ref="resourcePropertySource"/>
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg index="0" ref="redisSentinelConfiguration"/>
		<constructor-arg index="1" ref="jedisPoolConfig"/>
	</bean>

	<!-- 缓存序列化方式 -->
	<bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="valueSerializer" class="com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer" />
	<!-- 缓存 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		 <!-- 开启REIDS事务支持 -->
		<property name="enableTransactionSupport" value="false" />
		<property name="keySerializer" ref="keySerializer" />
		<property name="valueSerializer" ref="valueSerializer" />
		<property name="hashKeySerializer" ref="keySerializer" />
		<property name="hashValueSerializer" ref="valueSerializer" />
	</bean>
	<bean id="redisHelper" class="org.ibase4j.core.support.cache.RedisHelper" >
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
		<constructor-arg ref="jedisPoolConfig"/>
		<constructor-arg value="${redis.host}"/>
		<constructor-arg type="int" value="${redis.port}"/>
		<constructor-arg type="int" value="${redis.timeout}"/>
		<constructor-arg type="java.lang.String" value="${redis.password}"/>
		<constructor-arg type="int" value="${redis.dbindex}"/>
	</bean>
</beans>